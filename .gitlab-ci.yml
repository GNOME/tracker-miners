# The container images used in this pipeline are built from this
# GitLab project: https://gitlab.gnome.org/GNOME/tracker-oci-images

variables:
  # These can be used to see verbose log output from the functional-tests.
  # See HACKING.md for more information.
  G_MESSAGES_DEBUG: "Tracker"
  TRACKER_DEBUG: ""

  # This can be used when debugging test failures that only occur within GitLab CI.
  MESON_TEST_EXTRA_ARGS: ""

  TRACKER_TESTS_AWAIT_TIMEOUT: 60

stages:
  - test
  - analysis

.test_template: &test
  stage: test

  script:
    # We can build and test tracker-miners against tracker just by building
    # tracker as a submodule.
    - su tracker -c '.gitlab-ci/checkout-tracker.sh'
    - echo "Building tracker.git commit $(git rev-parse HEAD)"
    - su tracker -c 'mkdir build'
    - su tracker -c 'cd build; meson .. --prefix=/usr -Dtracker_core=subproject -Db_lto=true -Db_coverage=true'
    - su tracker -c 'cd build; ninja'
    - |
      # Remove the many "CI_" variables from the environment. Meson dumps the
      # whole environment for every failed test, and that gives a whole
      # screenful of junk each time unless we strip these.
      unset $(env|grep -o '^CI_[^=]*')

      su tracker -c 'cd build; dbus-run-session -- env LANG=C.UTF-8 LC_ALL=C.UTF-8 eatmydata meson test --suite tracker-miners --print-errorlogs'

  after_script:
    - |
      echo "Distribution: "
      echo
      egrep '^NAME=|^VERSION=' /etc/os-release
      echo
      echo "Test suite settings:"
      echo
      echo "G_MESSAGES_DEBUG: ${G_MESSAGES_DEBUG}"
      echo "TRACKER_DEBUG: ${TRACKER_DEBUG}"
      echo "MESON_TEST_EXTRA_ARGS: ${MESON_TEST_EXTRA_ARGS}"
      echo
      echo "These values can be set at https://gitlab.gnome.org/GNOME/tracker/pipelines/new"

  artifacts:
    when: always
    paths:
    - build/meson-logs/*.txt


test-fedora-latest:
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/fedora:latest
  <<: *test

test-fedora-rawhide:
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/fedora:rawhide
  <<: *test

test-ubuntu-rolling:
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/ubuntu:rolling
  <<: *test

coverity:
  stage: analysis
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/fedora:latest
  allow_failure: true
  script:
    - dnf install -y clang
    # Build tracker, we must go out the subproject route as we don't want
    # tracker code to be included in the coverity reports for tracker-miners.
    - su tracker -c '.gitlab-ci/checkout-tracker.sh'
    - su tracker -c 'export INSTALL=`pwd`/install; cd subprojects/tracker; meson build --libdir lib --prefix $INSTALL; cd build; ninja install;'
    - su tracker -c 'curl https://scan.coverity.com/download/linux64 --data "token=$COVERITY_TOKEN&project=tracker-miners" --output /tmp/coverity_tool.tgz'
    - su tracker -c 'tar zxf /tmp/coverity_tool.tgz'
    - su tracker -c 'mkdir coverity-build'
    - su tracker -c 'export INSTALL=`pwd`/install; export CC=clang; cd coverity-build; meson --pkg-config-path=$INSTALL/lib/pkgconfig ..'
    - su tracker -c 'cd coverity-build; ../cov-analysis-linux64-*/bin/cov-build --dir cov-int ninja'
    - su tracker -c 'cd coverity-build; tar czf cov-int.tar.gz cov-int'
    - su tracker -c 'curl https://scan.coverity.com/builds?project=tracker-miners
      --form token=$COVERITY_TOKEN --form email=carlosg@gnome.org
      --form file=@coverity-build/cov-int.tar.gz --form version="`git describe --tags`"
      --form description="gitlab CI build"'
  only:
    - master
