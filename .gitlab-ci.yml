# The container images used in this pipeline are built from this
# GitLab project: https://gitlab.gnome.org/GNOME/tracker-oci-images

variables:
  # These can be used to see verbose log output from the functional-tests.
  # See HACKING.md for more information.
  TRACKER_VERBOSITY: "1"
  TRACKER_TESTS_VERBOSE: "no"

  # This can be used when debugging test failures that only occur within GitLab CI.
  MESON_TEST_EXTRA_ARGS: ""

stages:
  - test


.test_template: &test
  stage: test

  script:
    # We can build and test tracker-miners against tracker just by building
    # tracker as a submodule.
    #
    # Note that this approach doesn't currently work for the functional-tests,
    # they require the ontologies and domain rules from tracker to be installed
    # somewhere. It would be nice to improve the functional-tests so that they
    # will run without depending on any files outside of the build tree. Note
    # that Tracker is installed on the host here, thanks to `dnf builddep`.
    - su tracker -c '.gitlab-ci/checkout-tracker.sh'
    - su tracker -c 'mkdir build'
    - su tracker -c 'cd build; meson .. --prefix=/usr -Dtracker_core=subproject -Db_lto=true -Db_coverage=true'
    - su tracker -c 'cd build; ninja'
    - |
      # Remove the many "CI_" variables from the environment. Meson dumps the
      # whole environment for every failed test, and that gives a whole
      # screenful of junk each time unless we strip these.
      unset $(env|grep -o '^CI_[^=]*')

      su tracker -c 'cd build; dbus-run-session -- env LANG=C.UTF-8 LC_ALL=C.UTF-8 meson test --suite tracker-miners --print-errorlogs'

  after_script:
    - |
      echo "Distribution: "
      echo
      egrep '^NAME=|^VERSION=' /etc/os-release
      echo
      echo "Test suite settings:"
      echo
      echo "TRACKER_VERBOSITY: ${TRACKER_VERBOSITY}"
      echo "TRACKER_TESTS_VERBOSE: ${TRACKER_TESTS_VERBOSE}"
      echo "MESON_TEST_EXTRA_ARGS: ${MESON_TEST_EXTRA_ARGS}"
      echo
      echo "These values can be set at https://gitlab.gnome.org/GNOME/tracker/pipelines/new"

  artifacts:
    when: always
    paths:
    - build/meson-logs/*.txt


test-fedora-latest:
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/fedora:latest
  <<: *test

test-ubuntu-rolling:
  image: registry.gitlab.gnome.org/gnome/tracker-oci-images/amd64/ubuntu:rolling
  <<: *test

test-alpine-rolling:
  image: alpine:edge
  before_script:
    - echo 'https://alpine.global.ssl.fastly.net/alpine/edge/community/' >> /etc/apk/repositories
    - echo 'https://alpine.global.ssl.fastly.net/alpine/edge/testing/' >> /etc/apk/repositories
    - apk add -U alpine-sdk bash meson glib-dev intltool ffmpeg-dev dbus-dev exempi-dev flac-dev gexiv2-dev gstreamer-dev enca-dev libexif-dev libgsf-dev libgxps-dev libiptcdata-dev libjpeg-turbo-dev libosinfo-dev libpng-dev libseccomp-dev tiff-dev libxml2-dev libvorbis-dev poppler-dev taglib-dev totem-pl-parser-dev upower-dev zlib-dev gst-plugins-base-dev giflib-dev libxml2-dev sqlite-dev networkmanager-dev vala py3-gobject3 py3-setuptools libsoup-dev libcue-dev json-glib-dev icu-dev gobject-introspection-dev gtk-doc libgrss-dev
    - addgroup -S tracker
    - adduser -D -G tracker -g tracker tracker
  <<: *test

